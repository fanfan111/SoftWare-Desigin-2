#pragma once

//键盘映射
char KEY_MAP[128] = \
{
	/*00*/     '\0', 
	/*01*/     '\0', 
	/*02*/     '1', 
	/*03*/     '2', 
	/*04*/     '3', 
	/*05*/     '4', 
	/*06*/     '5', 
	/*07*/     '6', 
	/*08*/     '7', 
	/*09*/     '8', 
	/*10*/     '9', 
	/*11*/     '0', 
	/*12*/     '-', 
	/*13*/     '=', 
	/*14*/     '\b', //退格
	/*15*/     '\0',
	/*16*/     'q', 
	/*17*/     'w', 
	/*18*/     'e', 
	/*19*/     'r', 
	/*20*/     't', 
	/*21*/     'y', 
	/*22*/     'u', 
	/*23*/     'i', 
	/*24*/     'o', 
	/*25*/     'p', 
	/*26*/     '[', 
	/*27*/     ']', 
	/*28*/     '\n', //回车
	/*29*/     '\0', 
	/*30*/     'a', 
	/*31*/     's', 
	/*32*/     'd', 
	/*33*/     'f', 
	/*34*/     'g', 
	/*35*/     'h', 
	/*36*/     'j', 
	/*37*/     'k', 
	/*38*/     'l', 
	/*39*/     ';', 
	/*40*/     '\'', 
	/*41*/     '`', 
	/*42*/     '\0', //左SHIFT
	/*43*/     '\\', 
	/*44*/     'z', 
	/*45*/     'x', 
	/*46*/     'c', 
	/*47*/     'v', 
	/*48*/     'b', 
	/*49*/     'n', 
	/*50*/     'm', 
	/*51*/     ',', 
	/*52*/     '.', 
	/*53*/     '/', 
	/*54*/     '\0', //右SHIFT
	/*55*/     '\0', 
	/*56*/     '\0', 
	/*57*/     ' ',  //空格
	/*58*/     '\0', //大写锁
	/*59*/     '\0', 
	/*60*/     '\0', 
	/*61*/     '\0', 
	/*62*/     '\0', 
	/*63*/     '\0', 
	/*64*/     '\0', 
	/*65*/     '\0', 
	/*66*/     '\0', 
	/*67*/     '\0', 
	/*68*/     '\0', 
	/*69*/     '\0', 
	/*70*/     '\0', 
	/*71*/     '\0', 
	/*72*/     '\0', 
	/*73*/     '\0', 
	/*74*/     '\0', 
	/*75*/     '\0', 
	/*76*/     '\0', 
	/*77*/     '\0', 
	/*78*/     '\0', 
	/*79*/     '\0', 
	/*80*/     '\0', 
	/*81*/     '\0', 
	/*82*/     '\0', 
	/*83*/     '\0', 
	/*84*/     '\0', 
	/*85*/     '\0', 
	/*86*/     '\0', 
	/*87*/     '\0', 
	/*88*/     '\0', 
	/*89*/     '\0', 
	/*90*/     '\0', 
	/*91*/     '\0', 
	/*92*/     '\0', 
	/*93*/     '\0', 
	/*94*/     '\0', 
	/*95*/     '\0', 
	/*96*/     '\0', 
	/*97*/     '\0', 
	/*98*/     '\0', 
	/*99*/     '\0', 
	/*100*/    '\0', 
	/*101*/    '\0', 
	/*102*/    '\0', 
	/*103*/    '\0', 
	/*104*/    '\0', 
	/*105*/    '\0', 
	/*106*/    '\0', 
	/*107*/    '\0', 
	/*108*/    '\0', 
	/*109*/    '\0', 
	/*110*/    '\0', 
	/*111*/    '\0', 
	/*112*/    '\0', 
	/*113*/    '\0', 
	/*114*/    '\0', 
	/*115*/    '\0', 
	/*116*/    '\0', 
	/*117*/    '\0', 
	/*118*/    '\0', 
	/*119*/    '\0', 
	/*120*/    '\0', 
	/*121*/    '\0', 
	/*122*/    '\0', 
	/*123*/    '\0', 
	/*124*/    '\0', 
	/*125*/    '\0', 
	/*126*/    '\0', 
	/*127*/    '\0'
};

char KEY_CAPS_MAP[128] = \
{
	/*00*/     '\0', 
	/*01*/     '\0', 
	/*02*/     '!', 
	/*03*/     '@', 
	/*04*/     '#', 
	/*05*/     '$', 
	/*06*/     '%', 
	/*07*/     '^', 
	/*08*/     '&', 
	/*09*/     '*', 
	/*10*/     '(', 
	/*11*/     ')', 
	/*12*/     '_', 
	/*13*/     '+', 
	/*14*/     '\0', 
	/*15*/     '\0',
	/*16*/     'Q', 
	/*17*/     'W', 
	/*18*/     'E', 
	/*19*/     'R', 
	/*20*/     'T', 
	/*21*/     'Y', 
	/*22*/     'U', 
	/*23*/     'I', 
	/*24*/     'O', 
	/*25*/     'P', 
	/*26*/     '{', 
	/*27*/     '}', 
	/*28*/     '\0', 
	/*29*/     '\0', 
	/*30*/     'A', 
	/*31*/     'S', 
	/*32*/     'D', 
	/*33*/     'F', 
	/*34*/     'G', 
	/*35*/     'H', 
	/*36*/     'J', 
	/*37*/     'K', 
	/*38*/     'L', 
	/*39*/     ':', 
	/*40*/     '"', 
	/*41*/     '~', 
	/*42*/     '\0', 
	/*43*/     '|', 
	/*44*/     'Z', 
	/*45*/     'X', 
	/*46*/     'C', 
	/*47*/     'V', 
	/*48*/     'B', 
	/*49*/     'N', 
	/*50*/     'M', 
	/*51*/     '<', 
	/*52*/     '>', 
	/*53*/     '?', 
	/*54*/     '\0', 
	/*55*/     '\0', 
	/*56*/     '\0', 
	/*57*/     '\0', 
	/*58*/     '\0', 
	/*59*/     '\0', 
	/*60*/     '\0', 
	/*61*/     '\0', 
	/*62*/     '\0', 
	/*63*/     '\0', 
	/*64*/     '\0', 
	/*65*/     '\0', 
	/*66*/     '\0', 
	/*67*/     '\0', 
	/*68*/     '\0', 
	/*69*/     '\0', 
	/*70*/     '\0', 
	/*71*/     '\0', 
	/*72*/     '\0', 
	/*73*/     '\0', 
	/*74*/     '\0', 
	/*75*/     '\0', 
	/*76*/     '\0', 
	/*77*/     '\0', 
	/*78*/     '\0', 
	/*79*/     '\0', 
	/*80*/     '\0', 
	/*81*/     '\0', 
	/*82*/     '\0', 
	/*83*/     '\0', 
	/*84*/     '\0', 
	/*85*/     '\0', 
	/*86*/     '\0', 
	/*87*/     '\0', 
	/*88*/     '\0', 
	/*89*/     '\0', 
	/*90*/     '\0', 
	/*91*/     '\0', 
	/*92*/     '\0', 
	/*93*/     '\0', 
	/*94*/     '\0', 
	/*95*/     '\0', 
	/*96*/     '\0', 
	/*97*/     '\0', 
	/*98*/     '\0', 
	/*99*/     '\0', 
	/*100*/    '\0', 
	/*101*/    '\0', 
	/*102*/    '\0', 
	/*103*/    '\0', 
	/*104*/    '\0', 
	/*105*/    '\0', 
	/*106*/    '\0', 
	/*107*/    '\0', 
	/*108*/    '\0', 
	/*109*/    '\0', 
	/*110*/    '\0', 
	/*111*/    '\0', 
	/*112*/    '\0', 
	/*113*/    '\0', 
	/*114*/    '\0', 
	/*115*/    '\0', 
	/*116*/    '\0', 
	/*117*/    '\0', 
	/*118*/    '\0', 
	/*119*/    '\0', 
	/*120*/    '\0', 
	/*121*/    '\0', 
	/*122*/    '\0', 
	/*123*/    '\0', 
	/*124*/    '\0', 
	/*125*/    '\0', 
	/*126*/    '\0', 
	/*127*/    '\0'
};

//扫描码翻译
DWORD transE0 = 0;
DWORD transE1 = 0;
DWORD isCapsLock = 0;
DWORD isLShift = 0;
DWORD isRShift = 0;

char transSacnCode(BYTE sacnCode)
{
	//所有拓展全部忽略
	if (transE0)
	{
		transE0--;
		return 0;
	}
	if (transE1)
	{
		transE1--;
		return 0;
	}
	if (sacnCode==0xE0)
	{
		transE0 = 1;
		return 0;
	}
	if (sacnCode==0xE1)
	{
		transE1 = 2;
		return 0;
	}

	//大写锁
	if (sacnCode==0x3A)
	{
		isCapsLock = 1 - isCapsLock;
		return 0;
	}

	//左上档按下
	if (sacnCode==0x2A)
	{
		isLShift = 1;
		return 0;
	}
	//左上档弹起
	if (sacnCode==0xAA)
	{
		isLShift = 0;
		return 0;
	}

	//右上档按下/弹起
	if (sacnCode==0x36)
	{
		isRShift = 1;
		return 0;
	}
	//右上档按下/弹起
	if (sacnCode==0xB6)
	{
		isRShift = 0;
		return 0;
	}

	//回车、退格、空格忽略大小写标志
	if (sacnCode==0x1C || sacnCode==0x0E || sacnCode==0x39)
	{
		return KEY_MAP[sacnCode];
	}

	//大于128忽略(大部分断码)
	if (sacnCode >= 128)
	{
		return 0;
	}

	//未定义忽略
	if (KEY_MAP[sacnCode] == '\0')
	{
		return 0;
	}

	//纯字母
	if ((sacnCode>=16&&sacnCode<=25)||(sacnCode>=30&&sacnCode<=38)||(sacnCode>=44&&sacnCode<=50))
	{
		if (0==(isCapsLock-(isLShift||isRShift)))
		{
			//小写
			return KEY_MAP[sacnCode];
		}
		else
		{
			//大写
			return KEY_CAPS_MAP[sacnCode];
		}
	}

	//剩余皆是符号
	if (0==(isLShift||isRShift))
	{
		//小写
		return KEY_MAP[sacnCode];
	}
	else
	{
		//大写
		return KEY_CAPS_MAP[sacnCode];
	}

	return 0;
}

void clearTransFlags()
{
	transE0 = 0;
	transE1 = 0;
	isCapsLock = 0;
	isLShift = 0;
	isRShift = 0;
}